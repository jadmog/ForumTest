{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar passport = require('passport'),\n    util = require('util'),\n    BadRequestError = require('./errors/badrequesterror');\n/**\n * `Strategy` constructor.\n *\n * The token authentication strategy authenticates requests based on the\n * credentials submitted through standard request headers or body.\n *\n * Applications must supply a `verify` callback which accepts\n * `token` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the fields in which the\n * credentials are found.\n *\n * Options:\n *\n *   - `tokenHeader`  header name where the token is found, defaults to 'x-token'\n *   - `tokenField`  field name where the password is found, defaults to 'password'\n *   - `tokenQuery`  query string name where the password is found, defaults to 'password'\n *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new TokenStrategy(\n *       function(token, done) {\n *         User.findOne({ token: token }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\n\n\nfunction Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n\n  if (!verify) throw new Error('token authentication strategy requires a verify function');\n  this._tokenHeader = options.tokenHeader ? options.tokenHeader.toLowerCase() : 'x-token';\n  this._tokenField = options.tokenField ? options.tokenField.toLowerCase() : 'token';\n  this._tokenQuery = options.tokenQuery ? options.tokenQuery.toLowerCase() : this._tokenField;\n  passport.Strategy.call(this);\n  this.name = 'token';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n/**\n * Inherit from `passport.Strategy`.\n */\n\n\nutil.inherits(Strategy, passport.Strategy);\n/**\n * Authenticate request based on the contents of a form submission.\n *\n * @param {Object} req\n * @api protected\n */\n\nStrategy.prototype.authenticate = function (req, options) {\n  options = options || {};\n  var self = this;\n  var token = req.headers[this._tokenHeader] || lookup(req.body, this._tokenField) || lookup(req.query, this._tokenQuery);\n\n  if (!token) {\n    return this.fail(new BadRequestError(options.badRequestMessage || 'Missing token'));\n  }\n\n  function verified(err, user, info) {\n    if (err) {\n      return self.error(err);\n    }\n\n    if (!user) {\n      return self.fail(info);\n    }\n\n    self.success(user, info);\n  }\n\n  if (self._passReqToCallback) {\n    this._verify(req, token, verified);\n  } else {\n    this._verify(token, verified);\n  }\n\n  function lookup(obj, field) {\n    if (!obj) {\n      return null;\n    }\n\n    var chain = field.split(']').join('').split('[');\n\n    for (var i = 0, len = chain.length; i < len; i++) {\n      var prop = obj[chain[i]];\n\n      if (typeof prop === 'undefined') {\n        return null;\n      }\n\n      if (typeof prop !== 'object') {\n        return prop;\n      }\n\n      obj = prop;\n    }\n\n    return null;\n  }\n};\n/**\n * Expose `Strategy`.\n */\n\n\nmodule.exports = Strategy;","map":{"version":3,"sources":["/Users/fadimoughaizel/Desktop/Portfolio/Forum/forum/node_modules/passport-accesstoken/lib/passport-token/strategy.js"],"names":["passport","require","util","BadRequestError","Strategy","options","verify","Error","_tokenHeader","tokenHeader","toLowerCase","_tokenField","tokenField","_tokenQuery","tokenQuery","call","name","_verify","_passReqToCallback","passReqToCallback","inherits","prototype","authenticate","req","self","token","headers","lookup","body","query","fail","badRequestMessage","verified","err","user","info","error","success","obj","field","chain","split","join","i","len","length","prop","module","exports"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\nvar passport = require('passport')\n  , util = require('util')\n  , BadRequestError = require('./errors/badrequesterror');\n\n\n/**\n * `Strategy` constructor.\n *\n * The token authentication strategy authenticates requests based on the\n * credentials submitted through standard request headers or body.\n *\n * Applications must supply a `verify` callback which accepts\n * `token` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the fields in which the\n * credentials are found.\n *\n * Options:\n *\n *   - `tokenHeader`  header name where the token is found, defaults to 'x-token'\n *   - `tokenField`  field name where the password is found, defaults to 'password'\n *   - `tokenQuery`  query string name where the password is found, defaults to 'password'\n *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new TokenStrategy(\n *       function(token, done) {\n *         User.findOne({ token: token }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n  \n  if (!verify) throw new Error('token authentication strategy requires a verify function');\n  \n  this._tokenHeader    = options.tokenHeader ? options.tokenHeader.toLowerCase()    : 'x-token';\n  \n  this._tokenField    = options.tokenField ? options.tokenField.toLowerCase()    : 'token';\n\n  this._tokenQuery    = options.tokenQuery ? options.tokenQuery.toLowerCase()    : this._tokenField;\n  \n  passport.Strategy.call(this);\n  this.name = 'token';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\n/**\n * Authenticate request based on the contents of a form submission.\n *\n * @param {Object} req\n * @api protected\n */\nStrategy.prototype.authenticate = function(req, options) {\n  options = options || {};\n  var self = this;\n  var token    = req.headers[this._tokenHeader] || lookup(req.body, this._tokenField) || lookup(req.query, this._tokenQuery);\n\n  if (!token) {\n    return this.fail(new BadRequestError(options.badRequestMessage || 'Missing token'));\n  }\n  \n  function verified(err, user, info) {\n    if (err) { return self.error(err); }\n    if (!user) { return self.fail(info); }\n    self.success(user, info);\n  }\n  \n  if (self._passReqToCallback) {\n    this._verify(req, token, verified);\n  } else {\n    this._verify(token, verified);\n  }\n  \n  function lookup(obj, field) {\n    if (!obj) { return null; }\n    var chain = field.split(']').join('').split('[');\n    for (var i = 0, len = chain.length; i < len; i++) {\n      var prop = obj[chain[i]];\n      if (typeof(prop) === 'undefined') { return null; }\n      if (typeof(prop) !== 'object') { return prop; }\n      obj = prop;\n    }\n    return null;\n  }\n}\n\n\n/**\n * Expose `Strategy`.\n */ \nmodule.exports = Strategy;\n"]},"metadata":{},"sourceType":"script"}