{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar fs = require('fs'),\n    path = require('path'),\n    util = require('util'),\n    Strategy = require('./strategy'),\n    SessionStrategy = require('./strategies/session'),\n    initialize = require('./middleware/initialize'),\n    authenticate = require('./middleware/authenticate');\n/**\n * `Passport` constructor.\n *\n * @api public\n */\n\n\nfunction Passport() {\n  this._key = 'passport';\n  this._strategies = {};\n  this._serializers = [];\n  this._deserializers = [];\n  this._infoTransformers = [];\n  this._framework = null;\n  this._userProperty = 'user';\n  this.use(new SessionStrategy());\n}\n\n;\n/**\n * Utilize the given `strategy` with optional `name`, overridding the strategy's\n * default name.\n *\n * Examples:\n *\n *     passport.use(new TwitterStrategy(...));\n *\n *     passport.use('api', new http.BasicStrategy(...));\n *\n * @param {String|Strategy} name\n * @param {Strategy} strategy\n * @return {Passport} for chaining\n * @api public\n */\n\nPassport.prototype.use = function (name, strategy) {\n  if (!strategy) {\n    strategy = name;\n    name = strategy.name;\n  }\n\n  if (!name) throw new Error('authentication strategies must have a name');\n  this._strategies[name] = strategy;\n  return this;\n};\n/**\n * Un-utilize the `strategy` with given `name`.\n *\n * In typical applications, the necessary authentication strategies are static,\n * configured once and always available.  As such, there is often no need to\n * invoke this function.\n *\n * However, in certain situations, applications may need dynamically configure\n * and de-configure authentication strategies.  The `use()`/`unuse()`\n * combination satisfies these scenarios.\n *\n * Examples:\n *\n *     passport.unuse('legacy-api');\n *\n * @param {String} name\n * @return {Passport} for chaining\n * @api public\n */\n\n\nPassport.prototype.unuse = function (name) {\n  delete this._strategies[name];\n  return this;\n};\n/**\n * Setup Passport to be used under framework.\n *\n * By default, Passport exposes middleware that operate using Connect-style\n * middleware using a `fn(req, res, next)` signature.  Other popular frameworks\n * have different expectations, and this function allows Passport to be adapted\n * to operate within such environments.\n *\n * If you are using a Connect-compatible framework, including Express, there is\n * no need to invoke this function.\n *\n * Examples:\n *\n *     passport.framework(require('hapi-passport')());\n *\n * @param {Object} name\n * @return {Passport} for chaining\n * @api public\n */\n\n\nPassport.prototype.framework = function (fw) {\n  this._framework = fw;\n  return this;\n};\n/**\n * Passport's primary initialization middleware.\n *\n * This middleware must be in use by the Connect/Express application for\n * Passport to operate.\n *\n * Options:\n *   - `userProperty`  Property to set on `req` upon login, defaults to _user_\n *\n * Examples:\n *\n *     app.configure(function() {\n *       app.use(passport.initialize());\n *     });\n *\n *     app.configure(function() {\n *       app.use(passport.initialize({ userProperty: 'currentUser' }));\n *     });\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\n\n\nPassport.prototype.initialize = function (options) {\n  options = options || {};\n  this._userProperty = options.userProperty || 'user';\n\n  if (this._framework && this._framework.initialize) {\n    return this._framework.initialize().bind(this);\n  }\n\n  return initialize().bind(this);\n};\n/**\n * Middleware that will restore login state from a session.\n *\n * Web applications typically use sessions to maintain login state between\n * requests.  For example, a user will authenticate by entering credentials into\n * a form which is submitted to the server.  If the credentials are valid, a\n * login session is established by setting a cookie containing a session\n * identifier in the user's web browser.  The web browser will send this cookie\n * in subsequent requests to the server, allowing a session to be maintained.\n *\n * If sessions are being utilized, and a login session has been established,\n * this middleware will populate `req.user` with the current user.\n *\n * Note that sessions are not strictly required for Passport to operate.\n * However, as a general rule, most web applications will make use of sessions.\n * An exception to this rule would be an API server, which expects each HTTP\n * request to provide credentials in an Authorization header.\n *\n * Examples:\n *\n *     app.configure(function() {\n *       app.use(connect.cookieParser());\n *       app.use(connect.session({ secret: 'keyboard cat' }));\n *       app.use(passport.initialize());\n *       app.use(passport.session());\n *     });\n *\n * Options:\n *   - `pauseStream`      Pause the request stream before deserializing the user\n *                        object from the session.  Defaults to _false_.  Should\n *                        be set to true in cases where middleware consuming the\n *                        request body is configured after passport and the\n *                        deserializeUser method is asynchronous.\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\n\n\nPassport.prototype.session = function (options) {\n  return this.authenticate('session', options);\n};\n/**\n * Middleware that will authenticate a request using the given `strategy` name,\n * with optional `options` and `callback`.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' })(req, res);\n *\n *     passport.authenticate('local', function(err, user) {\n *       if (!user) { return res.redirect('/login'); }\n *       res.end('Authenticated!');\n *     })(req, res);\n *\n *     passport.authenticate('basic', { session: false })(req, res);\n *\n *     app.get('/auth/twitter', passport.authenticate('twitter'), function(req, res) {\n *       // request will be redirected to Twitter\n *     });\n *     app.get('/auth/twitter/callback', passport.authenticate('twitter'), function(req, res) {\n *       res.json(req.user);\n *     });\n *\n * @param {String} strategy\n * @param {Object} options\n * @param {Function} callback\n * @return {Function} middleware\n * @api public\n */\n\n\nPassport.prototype.authenticate = function (strategy, options, callback) {\n  if (this._framework && this._framework.authenticate) {\n    return this._framework.authenticate(strategy, options, callback).bind(this);\n  }\n\n  return authenticate(strategy, options, callback).bind(this);\n};\n/**\n * Middleware that will authorize a third-party account using the given\n * `strategy` name, with optional `options`.\n *\n * If authorization is successful, the result provided by the strategy's verify\n * callback will be assigned to `req.account`.  The existing login session and\n * `req.user` will be unaffected.\n *\n * This function is particularly useful when connecting third-party accounts\n * to the local account of a user that is currently authenticated.\n *\n * Examples:\n *\n *    passport.authorize('twitter-authz', { failureRedirect: '/account' });\n *\n * @param {String} strategy\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\n\n\nPassport.prototype.authorize = function (strategy, options, callback) {\n  var fwAuthorize = this._framework && (this._framework.authorize || this._framework.authenticate);\n  options = options || {};\n  options.assignProperty = 'account';\n\n  if (fwAuthorize) {\n    return fwAuthorize(strategy, options, callback).bind(this);\n  }\n\n  return authenticate(strategy, options, callback).bind(this);\n};\n/**\n * Registers a function used to serialize user objects into the session.\n *\n * Examples:\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n * @api public\n */\n\n\nPassport.prototype.serializeUser = function (fn, done) {\n  if (typeof fn === 'function') {\n    return this._serializers.push(fn);\n  } // private implementation that traverses the chain of serializers, attempting\n  // to serialize a user\n\n\n  var user = fn;\n  var stack = this._serializers;\n\n  (function pass(i, err, obj) {\n    // serializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    } // an error or serialized object was obtained, done\n\n\n    if (err || obj || obj === 0) {\n      return done(err, obj);\n    }\n\n    var layer = stack[i];\n\n    if (!layer) {\n      return done(new Error('failed to serialize user into session'));\n    }\n\n    try {\n      layer(user, function (e, o) {\n        pass(i + 1, e, o);\n      });\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n/**\n * Registers a function used to deserialize user objects out of the session.\n *\n * Examples:\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @api public\n */\n\n\nPassport.prototype.deserializeUser = function (fn, done) {\n  if (typeof fn === 'function') {\n    return this._deserializers.push(fn);\n  } // private implementation that traverses the chain of deserializers,\n  // attempting to deserialize a user\n\n\n  var obj = fn;\n  var stack = this._deserializers;\n\n  (function pass(i, err, user) {\n    // deserializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    } // an error or deserialized user was obtained, done\n\n\n    if (err || user) {\n      return done(err, user);\n    } // a valid user existed when establishing the session, but that user has\n    // since been removed\n\n\n    if (user === null || user === false) {\n      return done(null, false);\n    }\n\n    var layer = stack[i];\n\n    if (!layer) {\n      return done(new Error('failed to deserialize user out of session'));\n    }\n\n    try {\n      layer(obj, function (e, u) {\n        pass(i + 1, e, u);\n      });\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n/**\n * Registers a function used to transform auth info.\n *\n * In some circumstances authorization details are contained in authentication\n * credentials or loaded as part of verification.\n *\n * For example, when using bearer tokens for API authentication, the tokens may\n * encode (either directly or indirectly in a database), details such as scope\n * of access or the client to which the token was issued.\n *\n * Such authorization details should be enforced separately from authentication.\n * Because Passport deals only with the latter, this is the responsiblity of\n * middleware or routes further along the chain.  However, it is not optimal to\n * decode the same data or execute the same database query later.  To avoid\n * this, Passport accepts optional `info` along with the authenticated `user`\n * in a strategy's `success()` action.  This info is set at `req.authInfo`,\n * where said later middlware or routes can access it.\n *\n * Optionally, applications can register transforms to proccess this info,\n * which take effect prior to `req.authInfo` being set.  This is useful, for\n * example, when the info contains a client ID.  The transform can load the\n * client from the database and include the instance in the transformed info,\n * allowing the full set of client properties to be convieniently accessed.\n *\n * If no transforms are registered, `info` supplied by the strategy will be left\n * unmodified.\n *\n * Examples:\n *\n *     passport.transformAuthInfo(function(info, done) {\n *       Client.findById(info.clientID, function (err, client) {\n *         info.client = client;\n *         done(err, info);\n *       });\n *     });\n *\n * @api public\n */\n\n\nPassport.prototype.transformAuthInfo = function (fn, done) {\n  if (typeof fn === 'function') {\n    return this._infoTransformers.push(fn);\n  } // private implementation that traverses the chain of transformers,\n  // attempting to transform auth info\n\n\n  var info = fn;\n  var stack = this._infoTransformers;\n\n  (function pass(i, err, tinfo) {\n    // transformers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    } // an error or transformed info was obtained, done\n\n\n    if (err || tinfo) {\n      return done(err, tinfo);\n    }\n\n    var layer = stack[i];\n\n    if (!layer) {\n      // if no transformers are registered (or they all pass), the default\n      // behavior is to use the un-transformed info as-is\n      return done(null, info);\n    }\n\n    try {\n      var arity = layer.length;\n\n      if (arity == 1) {\n        // sync\n        var t = layer(info);\n        pass(i + 1, null, t);\n      } else {\n        // async\n        layer(info, function (e, t) {\n          pass(i + 1, e, t);\n        });\n      }\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n/**\n * Return strategy with given `name`. \n *\n * @param {String} name\n * @return {Strategy}\n * @api private\n */\n\n\nPassport.prototype._strategy = function (name) {\n  return this._strategies[name];\n};\n/**\n * Export default singleton.\n *\n * @api public\n */\n\n\nexports = module.exports = new Passport();\n/**\n * Framework version.\n */\n\nrequire('pkginfo')(module, 'version');\n/**\n * Expose constructors.\n */\n\n\nexports.Passport = Passport;\nexports.Strategy = Strategy;\n/**\n * Expose strategies.\n */\n\nexports.strategies = {};\nexports.strategies.SessionStrategy = SessionStrategy;\n/**\n * HTTP extensions.\n */\n\nrequire('./http/request');","map":{"version":3,"sources":["/Users/fadimoughaizel/Desktop/Portfolio/Forum/forum/node_modules/passport/lib/passport/index.js"],"names":["fs","require","path","util","Strategy","SessionStrategy","initialize","authenticate","Passport","_key","_strategies","_serializers","_deserializers","_infoTransformers","_framework","_userProperty","use","prototype","name","strategy","Error","unuse","framework","fw","options","userProperty","bind","session","callback","authorize","fwAuthorize","assignProperty","serializeUser","fn","done","push","user","stack","pass","i","err","obj","undefined","layer","e","o","deserializeUser","u","transformAuthInfo","info","tinfo","arity","length","t","_strategy","exports","module","strategies"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\nvar fs = require('fs')\n  , path = require('path')\n  , util = require('util')\n  , Strategy = require('./strategy')\n  , SessionStrategy = require('./strategies/session')\n  , initialize = require('./middleware/initialize')\n  , authenticate = require('./middleware/authenticate');\n\n\n/**\n * `Passport` constructor.\n *\n * @api public\n */\nfunction Passport() {\n  this._key = 'passport';\n  this._strategies = {};\n  this._serializers = [];\n  this._deserializers = [];\n  this._infoTransformers = [];\n  this._framework = null;\n  \n  this._userProperty = 'user';\n  \n  this.use(new SessionStrategy());\n};\n\n/**\n * Utilize the given `strategy` with optional `name`, overridding the strategy's\n * default name.\n *\n * Examples:\n *\n *     passport.use(new TwitterStrategy(...));\n *\n *     passport.use('api', new http.BasicStrategy(...));\n *\n * @param {String|Strategy} name\n * @param {Strategy} strategy\n * @return {Passport} for chaining\n * @api public\n */\nPassport.prototype.use = function(name, strategy) {\n  if (!strategy) {\n    strategy = name;\n    name = strategy.name;\n  }\n  if (!name) throw new Error('authentication strategies must have a name');\n  \n  this._strategies[name] = strategy;\n  return this;\n};\n\n/**\n * Un-utilize the `strategy` with given `name`.\n *\n * In typical applications, the necessary authentication strategies are static,\n * configured once and always available.  As such, there is often no need to\n * invoke this function.\n *\n * However, in certain situations, applications may need dynamically configure\n * and de-configure authentication strategies.  The `use()`/`unuse()`\n * combination satisfies these scenarios.\n *\n * Examples:\n *\n *     passport.unuse('legacy-api');\n *\n * @param {String} name\n * @return {Passport} for chaining\n * @api public\n */\nPassport.prototype.unuse = function(name) {\n  delete this._strategies[name];\n  return this;\n}\n\n/**\n * Setup Passport to be used under framework.\n *\n * By default, Passport exposes middleware that operate using Connect-style\n * middleware using a `fn(req, res, next)` signature.  Other popular frameworks\n * have different expectations, and this function allows Passport to be adapted\n * to operate within such environments.\n *\n * If you are using a Connect-compatible framework, including Express, there is\n * no need to invoke this function.\n *\n * Examples:\n *\n *     passport.framework(require('hapi-passport')());\n *\n * @param {Object} name\n * @return {Passport} for chaining\n * @api public\n */\nPassport.prototype.framework = function(fw) {\n  this._framework = fw;\n  return this;\n}\n\n/**\n * Passport's primary initialization middleware.\n *\n * This middleware must be in use by the Connect/Express application for\n * Passport to operate.\n *\n * Options:\n *   - `userProperty`  Property to set on `req` upon login, defaults to _user_\n *\n * Examples:\n *\n *     app.configure(function() {\n *       app.use(passport.initialize());\n *     });\n *\n *     app.configure(function() {\n *       app.use(passport.initialize({ userProperty: 'currentUser' }));\n *     });\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nPassport.prototype.initialize = function(options) {\n  options = options || {};\n  this._userProperty = options.userProperty || 'user';\n  \n  if (this._framework && this._framework.initialize) {\n    return this._framework.initialize().bind(this);\n  }\n  \n  return initialize().bind(this);\n}\n\n/**\n * Middleware that will restore login state from a session.\n *\n * Web applications typically use sessions to maintain login state between\n * requests.  For example, a user will authenticate by entering credentials into\n * a form which is submitted to the server.  If the credentials are valid, a\n * login session is established by setting a cookie containing a session\n * identifier in the user's web browser.  The web browser will send this cookie\n * in subsequent requests to the server, allowing a session to be maintained.\n *\n * If sessions are being utilized, and a login session has been established,\n * this middleware will populate `req.user` with the current user.\n *\n * Note that sessions are not strictly required for Passport to operate.\n * However, as a general rule, most web applications will make use of sessions.\n * An exception to this rule would be an API server, which expects each HTTP\n * request to provide credentials in an Authorization header.\n *\n * Examples:\n *\n *     app.configure(function() {\n *       app.use(connect.cookieParser());\n *       app.use(connect.session({ secret: 'keyboard cat' }));\n *       app.use(passport.initialize());\n *       app.use(passport.session());\n *     });\n *\n * Options:\n *   - `pauseStream`      Pause the request stream before deserializing the user\n *                        object from the session.  Defaults to _false_.  Should\n *                        be set to true in cases where middleware consuming the\n *                        request body is configured after passport and the\n *                        deserializeUser method is asynchronous.\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nPassport.prototype.session = function(options) {\n  return this.authenticate('session', options);\n}\n\n/**\n * Middleware that will authenticate a request using the given `strategy` name,\n * with optional `options` and `callback`.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' })(req, res);\n *\n *     passport.authenticate('local', function(err, user) {\n *       if (!user) { return res.redirect('/login'); }\n *       res.end('Authenticated!');\n *     })(req, res);\n *\n *     passport.authenticate('basic', { session: false })(req, res);\n *\n *     app.get('/auth/twitter', passport.authenticate('twitter'), function(req, res) {\n *       // request will be redirected to Twitter\n *     });\n *     app.get('/auth/twitter/callback', passport.authenticate('twitter'), function(req, res) {\n *       res.json(req.user);\n *     });\n *\n * @param {String} strategy\n * @param {Object} options\n * @param {Function} callback\n * @return {Function} middleware\n * @api public\n */\nPassport.prototype.authenticate = function(strategy, options, callback) {\n  if (this._framework && this._framework.authenticate) {\n    return this._framework.authenticate(strategy, options, callback).bind(this);\n  }\n  \n  return authenticate(strategy, options, callback).bind(this);\n}\n\n/**\n * Middleware that will authorize a third-party account using the given\n * `strategy` name, with optional `options`.\n *\n * If authorization is successful, the result provided by the strategy's verify\n * callback will be assigned to `req.account`.  The existing login session and\n * `req.user` will be unaffected.\n *\n * This function is particularly useful when connecting third-party accounts\n * to the local account of a user that is currently authenticated.\n *\n * Examples:\n *\n *    passport.authorize('twitter-authz', { failureRedirect: '/account' });\n *\n * @param {String} strategy\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nPassport.prototype.authorize = function(strategy, options, callback) {\n  var fwAuthorize = this._framework && (this._framework.authorize || this._framework.authenticate);\n\n  options = options || {};\n  options.assignProperty = 'account';\n\n  if (fwAuthorize) {\n    return fwAuthorize(strategy, options, callback).bind(this);\n  }\n  \n  return authenticate(strategy, options, callback).bind(this);\n}\n\n/**\n * Registers a function used to serialize user objects into the session.\n *\n * Examples:\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n * @api public\n */\nPassport.prototype.serializeUser = function(fn, done) {\n  if (typeof fn === 'function') {\n    return this._serializers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of serializers, attempting\n  // to serialize a user\n  var user = fn;\n  \n  var stack = this._serializers;\n  (function pass(i, err, obj) {\n    // serializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or serialized object was obtained, done\n    if (err || obj || obj === 0) { return done(err, obj); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('failed to serialize user into session'));\n    }\n    \n    try {\n      layer(user, function(e, o) { pass(i + 1, e, o); } )\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n}\n\n/**\n * Registers a function used to deserialize user objects out of the session.\n *\n * Examples:\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @api public\n */\nPassport.prototype.deserializeUser = function(fn, done) {\n  if (typeof fn === 'function') {\n    return this._deserializers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of deserializers,\n  // attempting to deserialize a user\n  var obj = fn;\n  \n  var stack = this._deserializers;\n  (function pass(i, err, user) {\n    // deserializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or deserialized user was obtained, done\n    if (err || user) { return done(err, user); }\n    // a valid user existed when establishing the session, but that user has\n    // since been removed\n    if (user === null || user === false) { return done(null, false); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('failed to deserialize user out of session'));\n    }\n    \n    try {\n      layer(obj, function(e, u) { pass(i + 1, e, u); } )\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n}\n\n/**\n * Registers a function used to transform auth info.\n *\n * In some circumstances authorization details are contained in authentication\n * credentials or loaded as part of verification.\n *\n * For example, when using bearer tokens for API authentication, the tokens may\n * encode (either directly or indirectly in a database), details such as scope\n * of access or the client to which the token was issued.\n *\n * Such authorization details should be enforced separately from authentication.\n * Because Passport deals only with the latter, this is the responsiblity of\n * middleware or routes further along the chain.  However, it is not optimal to\n * decode the same data or execute the same database query later.  To avoid\n * this, Passport accepts optional `info` along with the authenticated `user`\n * in a strategy's `success()` action.  This info is set at `req.authInfo`,\n * where said later middlware or routes can access it.\n *\n * Optionally, applications can register transforms to proccess this info,\n * which take effect prior to `req.authInfo` being set.  This is useful, for\n * example, when the info contains a client ID.  The transform can load the\n * client from the database and include the instance in the transformed info,\n * allowing the full set of client properties to be convieniently accessed.\n *\n * If no transforms are registered, `info` supplied by the strategy will be left\n * unmodified.\n *\n * Examples:\n *\n *     passport.transformAuthInfo(function(info, done) {\n *       Client.findById(info.clientID, function (err, client) {\n *         info.client = client;\n *         done(err, info);\n *       });\n *     });\n *\n * @api public\n */\nPassport.prototype.transformAuthInfo = function(fn, done) {\n  if (typeof fn === 'function') {\n    return this._infoTransformers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of transformers,\n  // attempting to transform auth info\n  var info = fn;\n  \n  var stack = this._infoTransformers;\n  (function pass(i, err, tinfo) {\n    // transformers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or transformed info was obtained, done\n    if (err || tinfo) { return done(err, tinfo); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      // if no transformers are registered (or they all pass), the default\n      // behavior is to use the un-transformed info as-is\n      return done(null, info);\n    }\n    \n    try {\n      var arity = layer.length;\n      if (arity == 1) {\n        // sync\n        var t = layer(info);\n        pass(i + 1, null, t);\n      } else {\n        // async\n        layer(info, function(e, t) { pass(i + 1, e, t); } )\n      }\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n}\n\n/**\n * Return strategy with given `name`. \n *\n * @param {String} name\n * @return {Strategy}\n * @api private\n */\nPassport.prototype._strategy = function(name) {\n  return this._strategies[name];\n}\n\n\n/**\n * Export default singleton.\n *\n * @api public\n */\nexports = module.exports = new Passport();\n\n/**\n * Framework version.\n */\nrequire('pkginfo')(module, 'version');\n\n/**\n * Expose constructors.\n */\nexports.Passport = Passport;\nexports.Strategy = Strategy;\n\n\n/**\n * Expose strategies.\n */\nexports.strategies = {};\nexports.strategies.SessionStrategy = SessionStrategy;\n\n\n/**\n * HTTP extensions.\n */\nrequire('./http/request');"]},"metadata":{},"sourceType":"script"}