{"ast":null,"code":"var _jsxFileName = \"/Users/fadimoughaizel/Desktop/Portfolio/Forum/forum/src/Pages/ThreadPage.js\";\nimport React, { useEffect, useState, setState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport CreateAnswer from '../components/CreateAnswer';\nimport ScrollTop from '../components/ScrollTop.js';\nimport Axios from 'axios';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '200ch',\n    backgroundColor: theme.palette.background.paper\n  },\n  inline: {\n    display: 'inline'\n  }\n}));\nconst [answers, setAnswers] = useState([]);\nuseEffect(() => {\n  Axios({\n    method: \"GET\",\n    withCredentials: true,\n    url: \"http://localhost:5000/answers/answer\",\n    timeout: 4000\n  }).then(result => {\n    console.log('result = ', result);\n    setAnswers(result);\n    console.log('answers = ', answers);\n  }).catch(error => console.log('error', error));\n});\nexport default function AlignItemsList() {\n  const classes = useStyles();\n  let {\n    thread\n  } = useParams();\n  const initialValue = [{\n    username: 'test',\n    subject: 'test',\n    thread: 'test',\n    body: 'test'\n  }];\n  setAnswers(initialValue);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CreateAnswer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(ScrollTop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, console.log('answers in html = ', answers), answers.filter(answer => {\n    return answer.thread === thread;\n  }).map(answer => /*#__PURE__*/React.createElement(ListItem, {\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    alt: \"Remy Sharp\",\n    src: \"/static/images/avatar/1.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: thread,\n    secondary: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      component: \"span\",\n      variant: \"body2\",\n      className: classes.inline,\n      color: \"textPrimary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, answer.username)), answer.text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/fadimoughaizel/Desktop/Portfolio/Forum/forum/src/Pages/ThreadPage.js"],"names":["React","useEffect","useState","setState","useParams","makeStyles","List","ListItem","Divider","ListItemText","ListItemAvatar","Avatar","Typography","CreateAnswer","ScrollTop","Axios","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","inline","display","answers","setAnswers","method","withCredentials","url","timeout","then","result","console","log","catch","error","AlignItemsList","classes","thread","initialValue","username","subject","body","filter","answer","map","text"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,QAApC,QAAmD,OAAnD;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAGX,UAAU,CAAEY,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,QAAQ,EAAE,OAFN;AAGJC,IAAAA,eAAe,EAAEJ,KAAK,CAACK,OAAN,CAAcC,UAAd,CAAyBC;AAHtC,GADiC;AAMvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH;AAN+B,CAAZ,CAAD,CAA5B;AAWA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAuB1B,QAAQ,CAAC,EAAD,CAArC;AAEAD,SAAS,CAAC,MAAM;AACdc,EAAAA,KAAK,CAAC;AACJc,IAAAA,MAAM,EAAE,KADJ;AAEJC,IAAAA,eAAe,EAAE,IAFb;AAGJC,IAAAA,GAAG,EAAE,sCAHD;AAIJC,IAAAA,OAAO,EAAE;AAJL,GAAD,CAAL,CAKGC,IALH,CAKSC,MAAD,IAAY;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,MAAzB;AACAN,IAAAA,UAAU,CAACM,MAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA2BT,OAA3B;AACD,GATD,EAUCU,KAVD,CAUOC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB,CAVhB;AAWD,CAZQ,CAAT;AAeA,eAAe,SAASC,cAAT,GAA0B;AACvC,QAAMC,OAAO,GAAGxB,SAAS,EAAzB;AACA,MAAI;AAACyB,IAAAA;AAAD,MAAWrC,SAAS,EAAxB;AAEA,QAAMsC,YAAY,GAAG,CAAC;AACpBC,IAAAA,QAAQ,EAAE,MADU;AAEpBC,IAAAA,OAAO,EAAE,MAFW;AAGpBH,IAAAA,MAAM,EAAE,MAHY;AAIpBI,IAAAA,IAAI,EAAE;AAJc,GAAD,CAArB;AAOAjB,EAAAA,UAAU,CAACc,YAAD,CAAV;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,eAGA,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEF,OAAO,CAACtB,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiB,OAAO,CAACC,GAAR,CAAa,oBAAb,EAAoCT,OAApC,CADH,EAECA,OAAO,CACNmB,MADD,CACSC,MAAD,IAAY;AACnB,WAAOA,MAAM,CAACN,MAAP,KAAkBA,MAAzB;AACA,GAHD,EAIAO,GAJA,CAIKD,MAAD,iBACH,oBAAC,QAAD;AAAU,IAAA,UAAU,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAC,YAAZ;AAAyB,IAAA,GAAG,EAAC,6BAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAEN,MADX;AAEE,IAAA,SAAS,eACP,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,UAAD;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,SAAS,EAAED,OAAO,CAACf,MAHrB;AAIE,MAAA,KAAK,EAAC,aAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGsB,MAAM,CAACJ,QANV,CADA,CADF,EAWII,MAAM,CAACE,IAXX,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CALD,CAFD,CAHA,CADF;AAsCD","sourcesContent":["import React, {useEffect, useState, setState} from 'react';\nimport {useParams} from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport CreateAnswer from '../components/CreateAnswer'\nimport ScrollTop from '../components/ScrollTop.js'\nimport Axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '200ch',\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: 'inline',\n  },\n}));\n\nconst [answers, setAnswers]= useState([])\n\nuseEffect(() => {\n  Axios({\n    method: \"GET\",\n    withCredentials: true,\n    url: \"http://localhost:5000/answers/answer\",\n    timeout: 4000\n  }).then((result) => {\n    console.log('result = ', result)\n    setAnswers(result)\n    console.log( 'answers = ', answers)\n  })\n  .catch(error => console.log('error', error));\n})\n\n\nexport default function AlignItemsList() {\n  const classes = useStyles();\n  let {thread} = useParams()\n\n  const initialValue = [{\n    username: 'test',\n    subject: 'test',\n    thread: 'test',\n    body: 'test'\n  }]\n\n  setAnswers(initialValue)\n\n  return (\n    <div>\n    <CreateAnswer/>\n    <ScrollTop/>\n    <List className={classes.root}>\n      {console.log( 'answers in html = ',  answers)}\n    {answers\n     .filter((answer) => {\n      return answer.thread === thread \n     })\n    .map((answer) => (\n      <ListItem alignItems=\"flex-start\">\n        <ListItemAvatar>\n          <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n        </ListItemAvatar>\n        <ListItemText\n          primary={thread}\n          secondary={\n            <React.Fragment>\n              <div>\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={classes.inline}\n                color=\"textPrimary\"\n              >\n                {answer.username}\n              </Typography>\n              </div>\n               {answer.text}\n            </React.Fragment>\n          }\n        />\n      </ListItem>\n    ))}\n    </List>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}