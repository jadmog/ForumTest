{"ast":null,"code":"var _jsxFileName = \"/Users/fadimoughaizel/Desktop/Portfolio/Forum/forum/src/Pages/ThreadPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport CreateAnswer from '../components/CreateAnswer';\nimport ScrollTop from '../components/ScrollTop.js';\nimport Axios from 'axios';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '200ch',\n    backgroundColor: theme.palette.background.paper\n  },\n  inline: {\n    display: 'inline'\n  }\n}));\nexport default function AlignItemsList() {\n  const classes = useStyles();\n  let {\n    thread\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    Axios({\n      method: \"GET\",\n      withCredentials: true,\n      url: \"http://localhost:5000/threads/answer\",\n      timeout: 4000\n    }).then(newMessage => {\n      console.log('thread', newMessage); // \n\n      setThreads([...messages, newMessage]);\n      alert('Message saved !');\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CreateAnswer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(ScrollTop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, messages.filter(message => {\n    return message.title === thread;\n  }).map(message => /*#__PURE__*/React.createElement(ListItem, {\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    alt: \"Remy Sharp\",\n    src: \"/static/images/avatar/1.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: thread,\n    secondary: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      component: \"span\",\n      variant: \"body2\",\n      className: classes.inline,\n      color: \"textPrimary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, message.username)), message.text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/fadimoughaizel/Desktop/Portfolio/Forum/forum/src/Pages/ThreadPage.js"],"names":["React","useEffect","useState","useParams","makeStyles","List","ListItem","Divider","ListItemText","ListItemAvatar","Avatar","Typography","CreateAnswer","ScrollTop","Axios","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","inline","display","AlignItemsList","classes","thread","messages","setMessages","method","withCredentials","url","timeout","then","newMessage","console","log","setThreads","alert","filter","message","title","map","username","text"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useParams} from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport CreateAnswer from '../components/CreateAnswer'\nimport ScrollTop from '../components/ScrollTop.js'\nimport Axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '200ch',\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: 'inline',\n  },\n}));\n\n\n\n\nexport default function AlignItemsList() {\n  const classes = useStyles();\n  let {thread} = useParams()\n\n  const [messages, setMessages]= useState([])\n  useEffect(() => {\n    Axios({\n      method: \"GET\",\n      withCredentials: true,\n      url: \"http://localhost:5000/threads/answer\",\n      timeout: 4000\n    }).then(newMessage => {\n      console.log('thread', newMessage);\n      // \n      setThreads([\n        ...messages,\n        newMessage\n      ])\n      alert('Message saved !')\n    })\n  })\n\n  return (\n    <div>\n    <CreateAnswer/>\n    <ScrollTop/>\n    <List className={classes.root}>\n      \n    {messages\n     .filter((message) => {\n      return message.title === thread\n     })\n    .map((message) => (\n      <ListItem alignItems=\"flex-start\">\n        <ListItemAvatar>\n          <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n        </ListItemAvatar>\n        <ListItemText\n          primary={thread}\n          secondary={\n            <React.Fragment>\n              <div>\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={classes.inline}\n                color=\"textPrimary\"\n              >\n                {message.username}\n              </Typography>\n              </div>\n               {message.text}\n            </React.Fragment>\n          }\n        />\n      </ListItem>\n    ))}\n    </List>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}