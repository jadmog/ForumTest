{"ast":null,"code":"/**\n * Export actions prototype for strategies operating within an HTTP context.\n */\nvar actions = module.exports = {};\n/**\n * Authenticate `user`, with optional `info`.\n *\n * Strategies should call this function to successfully authenticate a user.\n * `user` should be an object supplied by the application after it has been\n * given an opportunity to verify credentials.  `info` is an optional argument\n * containing additional user information.  This is useful for third-party\n * authentication strategies to pass profile details.\n *\n * @param {Object} user\n * @param {Object} info\n * @api public\n */\n\nactions.success = function (user, info) {\n  this.delegate.success.apply(this, arguments);\n};\n/**\n * Fail authentication, with optional `challenge` and `status`, defaulting to\n * 401.\n *\n * Strategies should call this function to fail an authentication attempt.\n *\n * @param {String} challenge\n * @param {Number} status\n * @api public\n */\n\n\nactions.fail = function (challenge, status) {\n  this.delegate.fail.apply(this, arguments);\n};\n/**\n * Redirect to `url` with optional `status`, defaulting to 302.\n *\n * Strategies should call this function to redirect the user (via their user\n * agent) to a third-party website for authentication.\n *\n * @param {String} url\n * @param {Number} status\n * @api public\n */\n\n\nactions.redirect = function (url, status) {\n  var res = this.res;\n\n  if (typeof res.redirect == 'function') {\n    // If possible use redirect method on the response\n    // Assume Express API, optional status param comes first\n    if (status) {\n      res.redirect(status, url);\n    } else {\n      res.redirect(url);\n    }\n  } else {\n    // Otherwise fall back to native methods\n    res.statusCode = status || 302;\n    res.setHeader('Location', url);\n    res.setHeader('Content-Length', '0');\n    res.end();\n  }\n};\n/**\n * Pass without making a success or fail decision.\n *\n * Under most circumstances, Strategies should not need to call this function.\n * It exists primarily to allow previous authentication state to be restored,\n * for example from an HTTP session.\n *\n * @api public\n */\n\n\nactions.pass = function () {\n  this.next();\n};\n/**\n * Internal error while performing authentication.\n *\n * Strategies should call this function when an internal error occurs during the\n * process of performing authentication; for example, if the user directory is\n * not available.\n *\n * @param {Error} err\n * @api public\n */\n\n\nactions.error = function (err) {\n  this.next(err);\n};","map":{"version":3,"sources":["/Users/fadimoughaizel/Desktop/Portfolio/Forum/forum/node_modules/passport/lib/passport/context/http/actions.js"],"names":["actions","module","exports","success","user","info","delegate","apply","arguments","fail","challenge","status","redirect","url","res","statusCode","setHeader","end","pass","next","error","err"],"mappings":"AAAA;;;AAGA,IAAIA,OAAO,GAAGC,MAAM,CAACC,OAAP,GAAiB,EAA/B;AAGA;;;;;;;;;;;;;;AAaAF,OAAO,CAACG,OAAR,GAAkB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACrC,OAAKC,QAAL,CAAcH,OAAd,CAAsBI,KAAtB,CAA4B,IAA5B,EAAkCC,SAAlC;AACD,CAFD;AAIA;;;;;;;;;;;;AAUAR,OAAO,CAACS,IAAR,GAAe,UAASC,SAAT,EAAoBC,MAApB,EAA4B;AACzC,OAAKL,QAAL,CAAcG,IAAd,CAAmBF,KAAnB,CAAyB,IAAzB,EAA+BC,SAA/B;AACD,CAFD;AAIA;;;;;;;;;;;;AAUAR,OAAO,CAACY,QAAR,GAAmB,UAASC,GAAT,EAAcF,MAAd,EAAsB;AACvC,MAAIG,GAAG,GAAG,KAAKA,GAAf;;AACA,MAAI,OAAOA,GAAG,CAACF,QAAX,IAAuB,UAA3B,EAAuC;AACrC;AACA;AACA,QAAID,MAAJ,EAAY;AACVG,MAAAA,GAAG,CAACF,QAAJ,CAAaD,MAAb,EAAqBE,GAArB;AACD,KAFD,MAEO;AACLC,MAAAA,GAAG,CAACF,QAAJ,CAAaC,GAAb;AACD;AACF,GARD,MAQO;AACL;AACAC,IAAAA,GAAG,CAACC,UAAJ,GAAiBJ,MAAM,IAAI,GAA3B;AACAG,IAAAA,GAAG,CAACE,SAAJ,CAAc,UAAd,EAA0BH,GAA1B;AACAC,IAAAA,GAAG,CAACE,SAAJ,CAAc,gBAAd,EAAgC,GAAhC;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACD;AACF,CAjBD;AAmBA;;;;;;;;;;;AASAjB,OAAO,CAACkB,IAAR,GAAe,YAAW;AACxB,OAAKC,IAAL;AACD,CAFD;AAIA;;;;;;;;;;;;AAUAnB,OAAO,CAACoB,KAAR,GAAgB,UAASC,GAAT,EAAc;AAC5B,OAAKF,IAAL,CAAUE,GAAV;AACD,CAFD","sourcesContent":["/**\n * Export actions prototype for strategies operating within an HTTP context.\n */\nvar actions = module.exports = {};\n\n\n/**\n * Authenticate `user`, with optional `info`.\n *\n * Strategies should call this function to successfully authenticate a user.\n * `user` should be an object supplied by the application after it has been\n * given an opportunity to verify credentials.  `info` is an optional argument\n * containing additional user information.  This is useful for third-party\n * authentication strategies to pass profile details.\n *\n * @param {Object} user\n * @param {Object} info\n * @api public\n */\nactions.success = function(user, info) {\n  this.delegate.success.apply(this, arguments);\n}\n\n/**\n * Fail authentication, with optional `challenge` and `status`, defaulting to\n * 401.\n *\n * Strategies should call this function to fail an authentication attempt.\n *\n * @param {String} challenge\n * @param {Number} status\n * @api public\n */\nactions.fail = function(challenge, status) {\n  this.delegate.fail.apply(this, arguments);\n}\n\n/**\n * Redirect to `url` with optional `status`, defaulting to 302.\n *\n * Strategies should call this function to redirect the user (via their user\n * agent) to a third-party website for authentication.\n *\n * @param {String} url\n * @param {Number} status\n * @api public\n */\nactions.redirect = function(url, status) {\n  var res = this.res;\n  if (typeof res.redirect == 'function') {\n    // If possible use redirect method on the response\n    // Assume Express API, optional status param comes first\n    if (status) {\n      res.redirect(status, url);\n    } else {\n      res.redirect(url);\n    }\n  } else {\n    // Otherwise fall back to native methods\n    res.statusCode = status || 302;\n    res.setHeader('Location', url);\n    res.setHeader('Content-Length', '0');\n    res.end();\n  }\n}\n\n/**\n * Pass without making a success or fail decision.\n *\n * Under most circumstances, Strategies should not need to call this function.\n * It exists primarily to allow previous authentication state to be restored,\n * for example from an HTTP session.\n *\n * @api public\n */\nactions.pass = function() {\n  this.next();\n}\n\n/**\n * Internal error while performing authentication.\n *\n * Strategies should call this function when an internal error occurs during the\n * process of performing authentication; for example, if the user directory is\n * not available.\n *\n * @param {Error} err\n * @api public\n */\nactions.error = function(err) {\n  this.next(err);\n}\n\n"]},"metadata":{},"sourceType":"script"}